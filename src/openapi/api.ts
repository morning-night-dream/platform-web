/* tslint:disable */
/* eslint-disable */
/**
 * Morning Night Dream - AppGateway
 * This is the AppGateway API documentation.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: morning.night.dream@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * id
     * @type {string}
     * @memberof Article
     */
    'id'?: string;
    /**
     * 記事のURL
     * @type {string}
     * @memberof Article
     */
    'url'?: string;
    /**
     * タイトル
     * @type {string}
     * @memberof Article
     */
    'title'?: string;
    /**
     * description
     * @type {string}
     * @memberof Article
     */
    'description'?: string;
    /**
     * サムネイルのURL
     * @type {string}
     * @memberof Article
     */
    'thumbnail'?: string;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof Article
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface V1AuthResignRequest
 */
export interface V1AuthResignRequest {
    /**
     * パスワード
     * @type {string}
     * @memberof V1AuthResignRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface V1AuthSignInRequest
 */
export interface V1AuthSignInRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof V1AuthSignInRequest
     */
    'email': string;
    /**
     * パスワード
     * @type {string}
     * @memberof V1AuthSignInRequest
     */
    'password': string;
    /**
     * 公開鍵
     * @type {string}
     * @memberof V1AuthSignInRequest
     */
    'publicKey': string;
    /**
     * トークン有効期限(秒)
     * @type {number}
     * @memberof V1AuthSignInRequest
     */
    'expiresIn'?: number;
}
/**
 * 
 * @export
 * @interface V1AuthSignUpRequest
 */
export interface V1AuthSignUpRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof V1AuthSignUpRequest
     */
    'email': string;
    /**
     * パスワード
     * @type {string}
     * @memberof V1AuthSignUpRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface V1ListArticleResponse
 */
export interface V1ListArticleResponse {
    /**
     * 
     * @type {Array<Article>}
     * @memberof V1ListArticleResponse
     */
    'articles'?: Array<Article>;
    /**
     * 次回リクエスト時に指定するページトークン
     * @type {string}
     * @memberof V1ListArticleResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface V1UnauthorizedResponse
 */
export interface V1UnauthorizedResponse {
    /**
     * コード
     * @type {string}
     * @memberof V1UnauthorizedResponse
     */
    'code': string;
}

/**
 * ArticleApi - axios parameter creator
 * @export
 */
export const ArticleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List articles
         * @summary List articles
         * @param {number} maxPageSize ページサイズ
         * @param {string} [pageToken] トークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListArticles: async (maxPageSize: number, pageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'maxPageSize' is not null or undefined
            assertParamExists('v1ListArticles', 'maxPageSize', maxPageSize)
            const localVarPath = `/v1/article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (maxPageSize !== undefined) {
                localVarQueryParameter['maxPageSize'] = maxPageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleApi - functional programming interface
 * @export
 */
export const ArticleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleApiAxiosParamCreator(configuration)
    return {
        /**
         * List articles
         * @summary List articles
         * @param {number} maxPageSize ページサイズ
         * @param {string} [pageToken] トークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListArticles(maxPageSize: number, pageToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListArticles(maxPageSize, pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArticleApi - factory interface
 * @export
 */
export const ArticleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleApiFp(configuration)
    return {
        /**
         * List articles
         * @summary List articles
         * @param {number} maxPageSize ページサイズ
         * @param {string} [pageToken] トークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListArticles(maxPageSize: number, pageToken?: string, options?: any): AxiosPromise<V1ListArticleResponse> {
            return localVarFp.v1ListArticles(maxPageSize, pageToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export class ArticleApi extends BaseAPI {
    /**
     * List articles
     * @summary List articles
     * @param {number} maxPageSize ページサイズ
     * @param {string} [pageToken] トークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public v1ListArticles(maxPageSize: number, pageToken?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).v1ListArticles(maxPageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リフレッシュ
         * @summary リフレッシュ
         * @param {string} code 署名付きコード
         * @param {string} signature 署名
         * @param {number} [expiresIn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthRefresh: async (code: string, signature: string, expiresIn?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('v1AuthRefresh', 'code', code)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('v1AuthRefresh', 'signature', signature)
            const localVarPath = `/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            if (expiresIn !== undefined) {
                localVarQueryParameter['expiresIn'] = expiresIn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リサイン(退会)
         * @summary リサイン(退会)
         * @param {V1AuthResignRequest} v1AuthResignRequest リサインリクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthResign: async (v1AuthResignRequest: V1AuthResignRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AuthResignRequest' is not null or undefined
            assertParamExists('v1AuthResign', 'v1AuthResignRequest', v1AuthResignRequest)
            const localVarPath = `/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AuthResignRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サインイン
         * @summary サインイン
         * @param {V1AuthSignInRequest} v1AuthSignInRequest サインインリクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthSignIn: async (v1AuthSignInRequest: V1AuthSignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AuthSignInRequest' is not null or undefined
            assertParamExists('v1AuthSignIn', 'v1AuthSignInRequest', v1AuthSignInRequest)
            const localVarPath = `/v1/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AuthSignInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サインアウト
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthSignOut: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/signout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サインアップ
         * @summary サインアップ
         * @param {V1AuthSignUpRequest} v1AuthSignUpRequest サインアップリクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthSignUp: async (v1AuthSignUpRequest: V1AuthSignUpRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1AuthSignUpRequest' is not null or undefined
            assertParamExists('v1AuthSignUp', 'v1AuthSignUpRequest', v1AuthSignUpRequest)
            const localVarPath = `/v1/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1AuthSignUpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 検証
         * @summary 検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthVerify: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 署名検証
         * @summary 署名検証
         * @param {string} code 署名付きコード
         * @param {string} signature 署名
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        v1Sign: async (code: string, signature: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('v1Sign', 'code', code)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('v1Sign', 'signature', signature)
            const localVarPath = `/v1/sign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * リフレッシュ
         * @summary リフレッシュ
         * @param {string} code 署名付きコード
         * @param {string} signature 署名
         * @param {number} [expiresIn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthRefresh(code: string, signature: string, expiresIn?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthRefresh(code, signature, expiresIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * リサイン(退会)
         * @summary リサイン(退会)
         * @param {V1AuthResignRequest} v1AuthResignRequest リサインリクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthResign(v1AuthResignRequest: V1AuthResignRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthResign(v1AuthResignRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サインイン
         * @summary サインイン
         * @param {V1AuthSignInRequest} v1AuthSignInRequest サインインリクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthSignIn(v1AuthSignInRequest: V1AuthSignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthSignIn(v1AuthSignInRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サインアウト
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthSignOut(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthSignOut(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サインアップ
         * @summary サインアップ
         * @param {V1AuthSignUpRequest} v1AuthSignUpRequest サインアップリクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthSignUp(v1AuthSignUpRequest: V1AuthSignUpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthSignUp(v1AuthSignUpRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 検証
         * @summary 検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthVerify(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthVerify(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 署名検証
         * @summary 署名検証
         * @param {string} code 署名付きコード
         * @param {string} signature 署名
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async v1Sign(code: string, signature: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1Sign(code, signature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * リフレッシュ
         * @summary リフレッシュ
         * @param {string} code 署名付きコード
         * @param {string} signature 署名
         * @param {number} [expiresIn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthRefresh(code: string, signature: string, expiresIn?: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1AuthRefresh(code, signature, expiresIn, options).then((request) => request(axios, basePath));
        },
        /**
         * リサイン(退会)
         * @summary リサイン(退会)
         * @param {V1AuthResignRequest} v1AuthResignRequest リサインリクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthResign(v1AuthResignRequest: V1AuthResignRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1AuthResign(v1AuthResignRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * サインイン
         * @summary サインイン
         * @param {V1AuthSignInRequest} v1AuthSignInRequest サインインリクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthSignIn(v1AuthSignInRequest: V1AuthSignInRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1AuthSignIn(v1AuthSignInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * サインアウト
         * @summary サインアウト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthSignOut(options?: any): AxiosPromise<void> {
            return localVarFp.v1AuthSignOut(options).then((request) => request(axios, basePath));
        },
        /**
         * サインアップ
         * @summary サインアップ
         * @param {V1AuthSignUpRequest} v1AuthSignUpRequest サインアップリクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthSignUp(v1AuthSignUpRequest: V1AuthSignUpRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1AuthSignUp(v1AuthSignUpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 検証
         * @summary 検証
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthVerify(options?: any): AxiosPromise<void> {
            return localVarFp.v1AuthVerify(options).then((request) => request(axios, basePath));
        },
        /**
         * 署名検証
         * @summary 署名検証
         * @param {string} code 署名付きコード
         * @param {string} signature 署名
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        v1Sign(code: string, signature: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1Sign(code, signature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * リフレッシュ
     * @summary リフレッシュ
     * @param {string} code 署名付きコード
     * @param {string} signature 署名
     * @param {number} [expiresIn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthRefresh(code: string, signature: string, expiresIn?: number, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthRefresh(code, signature, expiresIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リサイン(退会)
     * @summary リサイン(退会)
     * @param {V1AuthResignRequest} v1AuthResignRequest リサインリクエストボディ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthResign(v1AuthResignRequest: V1AuthResignRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthResign(v1AuthResignRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サインイン
     * @summary サインイン
     * @param {V1AuthSignInRequest} v1AuthSignInRequest サインインリクエストボディ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthSignIn(v1AuthSignInRequest: V1AuthSignInRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthSignIn(v1AuthSignInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サインアウト
     * @summary サインアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthSignOut(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthSignOut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サインアップ
     * @summary サインアップ
     * @param {V1AuthSignUpRequest} v1AuthSignUpRequest サインアップリクエストボディ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthSignUp(v1AuthSignUpRequest: V1AuthSignUpRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthSignUp(v1AuthSignUpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 検証
     * @summary 検証
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1AuthVerify(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1AuthVerify(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 署名検証
     * @summary 署名検証
     * @param {string} code 署名付きコード
     * @param {string} signature 署名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1Sign(code: string, signature: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1Sign(code, signature, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ヘルスチェック
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1Health: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * ヘルスチェック
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1Health(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1Health(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * ヘルスチェック
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1Health(options?: any): AxiosPromise<void> {
            return localVarFp.v1Health(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * ヘルスチェック
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public v1Health(options?: AxiosRequestConfig) {
        return HealthApiFp(this.configuration).v1Health(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VersionApi - axios parameter creator
 * @export
 */
export const VersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * APIバージョン
         * @summary APIバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1APIVersion: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/version/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Coreバージョン
         * @summary Coreバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreVersion: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/version/core`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VersionApiAxiosParamCreator(configuration)
    return {
        /**
         * APIバージョン
         * @summary APIバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1APIVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1APIVersion(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Coreバージョン
         * @summary Coreバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreVersion(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VersionApiFp(configuration)
    return {
        /**
         * APIバージョン
         * @summary APIバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1APIVersion(options?: any): AxiosPromise<void> {
            return localVarFp.v1APIVersion(options).then((request) => request(axios, basePath));
        },
        /**
         * Coreバージョン
         * @summary Coreバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreVersion(options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreVersion(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
    /**
     * APIバージョン
     * @summary APIバージョン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public v1APIVersion(options?: AxiosRequestConfig) {
        return VersionApiFp(this.configuration).v1APIVersion(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Coreバージョン
     * @summary Coreバージョン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public v1CoreVersion(options?: AxiosRequestConfig) {
        return VersionApiFp(this.configuration).v1CoreVersion(options).then((request) => request(this.axios, this.basePath));
    }
}


